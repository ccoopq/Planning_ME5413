//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the spinnaker_camera_driver package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __spinnaker_camera_driver__SPINNAKERCONFIG_H__
#define __spinnaker_camera_driver__SPINNAKERCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace spinnaker_camera_driver
{
  class SpinnakerConfigStatics;

  class SpinnakerConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(SpinnakerConfig &config, const SpinnakerConfig &max, const SpinnakerConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const SpinnakerConfig &config1, const SpinnakerConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, SpinnakerConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const SpinnakerConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, SpinnakerConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const SpinnakerConfig &config) const = 0;
      virtual void getValue(const SpinnakerConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T SpinnakerConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T SpinnakerConfig::* field;

      virtual void clamp(SpinnakerConfig &config, const SpinnakerConfig &max, const SpinnakerConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const SpinnakerConfig &config1, const SpinnakerConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, SpinnakerConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const SpinnakerConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, SpinnakerConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const SpinnakerConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const SpinnakerConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, SpinnakerConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, SpinnakerConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<SpinnakerConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(SpinnakerConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("acquisition_frame_rate"==(*_i)->name){acquisition_frame_rate = boost::any_cast<double>(val);}
        if("acquisition_frame_rate_enable"==(*_i)->name){acquisition_frame_rate_enable = boost::any_cast<bool>(val);}
        if("exposure_mode"==(*_i)->name){exposure_mode = boost::any_cast<std::string>(val);}
        if("exposure_auto"==(*_i)->name){exposure_auto = boost::any_cast<std::string>(val);}
        if("exposure_time"==(*_i)->name){exposure_time = boost::any_cast<double>(val);}
        if("auto_exposure_time_upper_limit"==(*_i)->name){auto_exposure_time_upper_limit = boost::any_cast<double>(val);}
        if("gain_selector"==(*_i)->name){gain_selector = boost::any_cast<std::string>(val);}
        if("auto_gain"==(*_i)->name){auto_gain = boost::any_cast<std::string>(val);}
        if("gain"==(*_i)->name){gain = boost::any_cast<double>(val);}
        if("brightness"==(*_i)->name){brightness = boost::any_cast<double>(val);}
        if("sharpening_enable"==(*_i)->name){sharpening_enable = boost::any_cast<bool>(val);}
        if("auto_sharpness"==(*_i)->name){auto_sharpness = boost::any_cast<bool>(val);}
        if("sharpness"==(*_i)->name){sharpness = boost::any_cast<double>(val);}
        if("sharpening_threshold"==(*_i)->name){sharpening_threshold = boost::any_cast<double>(val);}
        if("saturation_enable"==(*_i)->name){saturation_enable = boost::any_cast<bool>(val);}
        if("saturation"==(*_i)->name){saturation = boost::any_cast<double>(val);}
        if("gamma_enable"==(*_i)->name){gamma_enable = boost::any_cast<bool>(val);}
        if("gamma"==(*_i)->name){gamma = boost::any_cast<double>(val);}
        if("auto_white_balance"==(*_i)->name){auto_white_balance = boost::any_cast<std::string>(val);}
        if("white_balance_blue_ratio"==(*_i)->name){white_balance_blue_ratio = boost::any_cast<double>(val);}
        if("white_balance_red_ratio"==(*_i)->name){white_balance_red_ratio = boost::any_cast<double>(val);}
        if("image_format_roi_width"==(*_i)->name){image_format_roi_width = boost::any_cast<int>(val);}
        if("image_format_roi_height"==(*_i)->name){image_format_roi_height = boost::any_cast<int>(val);}
        if("image_format_x_offset"==(*_i)->name){image_format_x_offset = boost::any_cast<int>(val);}
        if("image_format_y_offset"==(*_i)->name){image_format_y_offset = boost::any_cast<int>(val);}
        if("image_format_x_binning"==(*_i)->name){image_format_x_binning = boost::any_cast<int>(val);}
        if("image_format_y_binning"==(*_i)->name){image_format_y_binning = boost::any_cast<int>(val);}
        if("image_format_x_decimation"==(*_i)->name){image_format_x_decimation = boost::any_cast<int>(val);}
        if("image_format_y_decimation"==(*_i)->name){image_format_y_decimation = boost::any_cast<int>(val);}
        if("image_format_x_reverse"==(*_i)->name){image_format_x_reverse = boost::any_cast<bool>(val);}
        if("image_format_y_reverse"==(*_i)->name){image_format_y_reverse = boost::any_cast<bool>(val);}
        if("image_format_color_coding"==(*_i)->name){image_format_color_coding = boost::any_cast<std::string>(val);}
        if("isp_enable"==(*_i)->name){isp_enable = boost::any_cast<bool>(val);}
        if("enable_trigger"==(*_i)->name){enable_trigger = boost::any_cast<std::string>(val);}
        if("trigger_selector"==(*_i)->name){trigger_selector = boost::any_cast<std::string>(val);}
        if("trigger_activation_mode"==(*_i)->name){trigger_activation_mode = boost::any_cast<std::string>(val);}
        if("trigger_source"==(*_i)->name){trigger_source = boost::any_cast<std::string>(val);}
        if("trigger_overlap_mode"==(*_i)->name){trigger_overlap_mode = boost::any_cast<std::string>(val);}
        if("line_source"==(*_i)->name){line_source = boost::any_cast<std::string>(val);}
        if("line_selector"==(*_i)->name){line_selector = boost::any_cast<std::string>(val);}
        if("line_mode"==(*_i)->name){line_mode = boost::any_cast<std::string>(val);}
        if("auto_exposure_roi_offset_x"==(*_i)->name){auto_exposure_roi_offset_x = boost::any_cast<int>(val);}
        if("auto_exposure_roi_offset_y"==(*_i)->name){auto_exposure_roi_offset_y = boost::any_cast<int>(val);}
        if("auto_exposure_roi_width"==(*_i)->name){auto_exposure_roi_width = boost::any_cast<int>(val);}
        if("auto_exposure_roi_height"==(*_i)->name){auto_exposure_roi_height = boost::any_cast<int>(val);}
        if("auto_exposure_lighting_mode"==(*_i)->name){auto_exposure_lighting_mode = boost::any_cast<std::string>(val);}
        if("time_offset"==(*_i)->name){time_offset = boost::any_cast<double>(val);}
      }
    }

    double acquisition_frame_rate;
bool acquisition_frame_rate_enable;
std::string exposure_mode;
std::string exposure_auto;
double exposure_time;
double auto_exposure_time_upper_limit;
std::string gain_selector;
std::string auto_gain;
double gain;
double brightness;
bool sharpening_enable;
bool auto_sharpness;
double sharpness;
double sharpening_threshold;
bool saturation_enable;
double saturation;
bool gamma_enable;
double gamma;
std::string auto_white_balance;
double white_balance_blue_ratio;
double white_balance_red_ratio;
int image_format_roi_width;
int image_format_roi_height;
int image_format_x_offset;
int image_format_y_offset;
int image_format_x_binning;
int image_format_y_binning;
int image_format_x_decimation;
int image_format_y_decimation;
bool image_format_x_reverse;
bool image_format_y_reverse;
std::string image_format_color_coding;
bool isp_enable;
std::string enable_trigger;
std::string trigger_selector;
std::string trigger_activation_mode;
std::string trigger_source;
std::string trigger_overlap_mode;
std::string line_source;
std::string line_selector;
std::string line_mode;
int auto_exposure_roi_offset_x;
int auto_exposure_roi_offset_y;
int auto_exposure_roi_width;
int auto_exposure_roi_height;
std::string auto_exposure_lighting_mode;
double time_offset;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double acquisition_frame_rate;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool acquisition_frame_rate_enable;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string exposure_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string exposure_auto;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double exposure_time;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double auto_exposure_time_upper_limit;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string gain_selector;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string auto_gain;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double gain;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double brightness;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool sharpening_enable;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_sharpness;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sharpness;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double sharpening_threshold;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool saturation_enable;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double saturation;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool gamma_enable;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double gamma;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string auto_white_balance;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double white_balance_blue_ratio;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double white_balance_red_ratio;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int image_format_roi_width;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int image_format_roi_height;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int image_format_x_offset;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int image_format_y_offset;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int image_format_x_binning;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int image_format_y_binning;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int image_format_x_decimation;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int image_format_y_decimation;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool image_format_x_reverse;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool image_format_y_reverse;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string image_format_color_coding;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool isp_enable;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string enable_trigger;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string trigger_selector;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string trigger_activation_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string trigger_source;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string trigger_overlap_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string line_source;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string line_selector;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string line_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int auto_exposure_roi_offset_x;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int auto_exposure_roi_offset_y;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int auto_exposure_roi_width;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int auto_exposure_roi_height;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string auto_exposure_lighting_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double time_offset;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("SpinnakerConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const SpinnakerConfig &__max__ = __getMax__();
      const SpinnakerConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const SpinnakerConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const SpinnakerConfig &__getDefault__();
    static const SpinnakerConfig &__getMax__();
    static const SpinnakerConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const SpinnakerConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void SpinnakerConfig::ParamDescription<std::string>::clamp(SpinnakerConfig &config, const SpinnakerConfig &max, const SpinnakerConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class SpinnakerConfigStatics
  {
    friend class SpinnakerConfig;

    SpinnakerConfigStatics()
    {
SpinnakerConfig::GroupDescription<SpinnakerConfig::DEFAULT, SpinnakerConfig> Default("Default", "", 0, 0, true, &SpinnakerConfig::groups);
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.acquisition_frame_rate = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.acquisition_frame_rate = 120.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.acquisition_frame_rate = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("acquisition_frame_rate", "double", 0, "User controlled acquisition frame rate in Hertz (frames per second).", "", &SpinnakerConfig::acquisition_frame_rate)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("acquisition_frame_rate", "double", 0, "User controlled acquisition frame rate in Hertz (frames per second).", "", &SpinnakerConfig::acquisition_frame_rate)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.acquisition_frame_rate_enable = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.acquisition_frame_rate_enable = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.acquisition_frame_rate_enable = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("acquisition_frame_rate_enable", "bool", 0, "Enables manual (True) and automatic (False) control of the aquisition frame rate", "", &SpinnakerConfig::acquisition_frame_rate_enable)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("acquisition_frame_rate_enable", "bool", 0, "Enables manual (True) and automatic (False) control of the aquisition frame rate", "", &SpinnakerConfig::acquisition_frame_rate_enable)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_mode = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_mode = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_mode = "Timed";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("exposure_mode", "str", 1, "Sets the operation mode of the Exposure (Timed or TriggerWidth).", "", &SpinnakerConfig::exposure_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("exposure_mode", "str", 1, "Sets the operation mode of the Exposure (Timed or TriggerWidth).", "", &SpinnakerConfig::exposure_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_auto = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_auto = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_auto = "Continuous";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("exposure_auto", "str", 0, "Sets the automatic exposure mode to: 'Off', 'Once' or 'Continuous'", "{'enum_description': 'Automatic mode: Off, Once, or Continuous.', 'enum': [{'srcline': 83, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoOff'}, {'srcline': 84, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Once', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoOnce'}, {'srcline': 85, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Continuous', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoContinuous'}]}", &SpinnakerConfig::exposure_auto)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("exposure_auto", "str", 0, "Sets the automatic exposure mode to: 'Off', 'Once' or 'Continuous'", "{'enum_description': 'Automatic mode: Off, Once, or Continuous.', 'enum': [{'srcline': 83, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoOff'}, {'srcline': 84, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Once', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoOnce'}, {'srcline': 85, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Continuous', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoContinuous'}]}", &SpinnakerConfig::exposure_auto)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_time = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_time = 3000000.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_time = 100.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("exposure_time", "double", 0, "Exposure time in microseconds when Exposure Mode is Timed and Exposure Auto is not Continuous.", "", &SpinnakerConfig::exposure_time)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("exposure_time", "double", 0, "Exposure time in microseconds when Exposure Mode is Timed and Exposure Auto is not Continuous.", "", &SpinnakerConfig::exposure_time)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_exposure_time_upper_limit = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_exposure_time_upper_limit = 3000000.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_exposure_time_upper_limit = 5000.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("auto_exposure_time_upper_limit", "double", 0, "Upper Limit on Shutter Speed.", "", &SpinnakerConfig::auto_exposure_time_upper_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("auto_exposure_time_upper_limit", "double", 0, "Upper Limit on Shutter Speed.", "", &SpinnakerConfig::auto_exposure_time_upper_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain_selector = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain_selector = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain_selector = "All";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("gain_selector", "str", 0, "Selects which gain to control. The All selection is a total amplification across all channels.", "", &SpinnakerConfig::gain_selector)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("gain_selector", "str", 0, "Selects which gain to control. The All selection is a total amplification across all channels.", "", &SpinnakerConfig::gain_selector)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_gain = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_gain = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_gain = "Continuous";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("auto_gain", "str", 0, "Gain state control. (Off, Once, Continuous)", "{'enum_description': 'Automatic mode: Off, Once, or Continuous.', 'enum': [{'srcline': 83, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoOff'}, {'srcline': 84, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Once', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoOnce'}, {'srcline': 85, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Continuous', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoContinuous'}]}", &SpinnakerConfig::auto_gain)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("auto_gain", "str", 0, "Gain state control. (Off, Once, Continuous)", "{'enum_description': 'Automatic mode: Off, Once, or Continuous.', 'enum': [{'srcline': 83, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoOff'}, {'srcline': 84, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Once', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoOnce'}, {'srcline': 85, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Continuous', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoContinuous'}]}", &SpinnakerConfig::auto_gain)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain = -10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain = 30.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("gain", "double", 0, "Controls the amplification of the video signal in dB.", "", &SpinnakerConfig::gain)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("gain", "double", 0, "Controls the amplification of the video signal in dB.", "", &SpinnakerConfig::gain)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.brightness = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.brightness = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.brightness = 1.7;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("brightness", "double", 0, "Also known as Black level offset. Refers to the output of the camera when not illuminated.", "", &SpinnakerConfig::brightness)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("brightness", "double", 0, "Also known as Black level offset. Refers to the output of the camera when not illuminated.", "", &SpinnakerConfig::brightness)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sharpening_enable = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sharpening_enable = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sharpening_enable = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("sharpening_enable", "bool", 0, "Enables/disables the sharpening feature. Sharpening is disabled by default.", "", &SpinnakerConfig::sharpening_enable)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("sharpening_enable", "bool", 0, "Enables/disables the sharpening feature. Sharpening is disabled by default.", "", &SpinnakerConfig::sharpening_enable)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_sharpness = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_sharpness = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_sharpness = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("auto_sharpness", "bool", 0, "Enables/disables the auto sharpening feature.", "", &SpinnakerConfig::auto_sharpness)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("auto_sharpness", "bool", 0, "Enables/disables the auto sharpening feature.", "", &SpinnakerConfig::auto_sharpness)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sharpness = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sharpness = 4095.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sharpness = 1024.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("sharpness", "double", 0, "Controls the amount to sharpen a signal.", "", &SpinnakerConfig::sharpness)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("sharpness", "double", 0, "Controls the amount to sharpen a signal.", "", &SpinnakerConfig::sharpness)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sharpening_threshold = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sharpening_threshold = 0.25;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sharpening_threshold = 0.1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("sharpening_threshold", "double", 0, "Controls the minimum intensity gradient change to invoke sharpening. ", "", &SpinnakerConfig::sharpening_threshold)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("sharpening_threshold", "double", 0, "Controls the minimum intensity gradient change to invoke sharpening. ", "", &SpinnakerConfig::sharpening_threshold)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.saturation_enable = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.saturation_enable = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.saturation_enable = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("saturation_enable", "bool", 0, "Enables/disables Saturation adjustment..", "", &SpinnakerConfig::saturation_enable)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("saturation_enable", "bool", 0, "Enables/disables Saturation adjustment..", "", &SpinnakerConfig::saturation_enable)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.saturation = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.saturation = 399.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.saturation = 100.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("saturation", "double", 0, "Saturation.", "", &SpinnakerConfig::saturation)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("saturation", "double", 0, "Saturation.", "", &SpinnakerConfig::saturation)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gamma_enable = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gamma_enable = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gamma_enable = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("gamma_enable", "bool", 0, "Enables/disables gamma correction.", "", &SpinnakerConfig::gamma_enable)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("gamma_enable", "bool", 0, "Enables/disables gamma correction.", "", &SpinnakerConfig::gamma_enable)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gamma = 0.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gamma = 4.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gamma = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("gamma", "double", 0, "Controls the gamma correction of pixel intensity.", "", &SpinnakerConfig::gamma)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("gamma", "double", 0, "Controls the gamma correction of pixel intensity.", "", &SpinnakerConfig::gamma)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_white_balance = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_white_balance = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_white_balance = "Off";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("auto_white_balance", "str", 0, "White Balance compensates for color shifts caused by different lighting conditions.", "{'enum_description': 'Automatic mode: Off, Once, or Continuous.', 'enum': [{'srcline': 83, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoOff'}, {'srcline': 84, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Once', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoOnce'}, {'srcline': 85, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Continuous', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoContinuous'}]}", &SpinnakerConfig::auto_white_balance)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("auto_white_balance", "str", 0, "White Balance compensates for color shifts caused by different lighting conditions.", "{'enum_description': 'Automatic mode: Off, Once, or Continuous.', 'enum': [{'srcline': 83, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoOff'}, {'srcline': 84, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Once', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoOnce'}, {'srcline': 85, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Continuous', 'ctype': 'std::string', 'type': 'str', 'name': 'AutoContinuous'}]}", &SpinnakerConfig::auto_white_balance)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.white_balance_blue_ratio = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.white_balance_blue_ratio = 1023.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.white_balance_blue_ratio = 800.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("white_balance_blue_ratio", "double", 0, "White balance blue component.", "", &SpinnakerConfig::white_balance_blue_ratio)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("white_balance_blue_ratio", "double", 0, "White balance blue component.", "", &SpinnakerConfig::white_balance_blue_ratio)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.white_balance_red_ratio = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.white_balance_red_ratio = 1023.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.white_balance_red_ratio = 550.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("white_balance_red_ratio", "double", 0, "White balance red component.", "", &SpinnakerConfig::white_balance_red_ratio)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("white_balance_red_ratio", "double", 0, "White balance red component.", "", &SpinnakerConfig::white_balance_red_ratio)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_format_roi_width = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_format_roi_width = 65535;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_format_roi_width = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_roi_width", "int", 1, "Width of the image provided by the device (in pixels).", "", &SpinnakerConfig::image_format_roi_width)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_roi_width", "int", 1, "Width of the image provided by the device (in pixels).", "", &SpinnakerConfig::image_format_roi_width)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_format_roi_height = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_format_roi_height = 65535;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_format_roi_height = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_roi_height", "int", 1, "Height of the image provided by the device (in pixels).", "", &SpinnakerConfig::image_format_roi_height)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_roi_height", "int", 1, "Height of the image provided by the device (in pixels).", "", &SpinnakerConfig::image_format_roi_height)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_format_x_offset = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_format_x_offset = 65535;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_format_x_offset = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_x_offset", "int", 1, "Horizontal offset from the origin to the ROI (in pixels).", "", &SpinnakerConfig::image_format_x_offset)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_x_offset", "int", 1, "Horizontal offset from the origin to the ROI (in pixels).", "", &SpinnakerConfig::image_format_x_offset)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_format_y_offset = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_format_y_offset = 65535;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_format_y_offset = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_y_offset", "int", 1, "Vertical offset from the origin to the ROI (in pixels).", "", &SpinnakerConfig::image_format_y_offset)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_y_offset", "int", 1, "Vertical offset from the origin to the ROI (in pixels).", "", &SpinnakerConfig::image_format_y_offset)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_format_x_binning = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_format_x_binning = 8;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_format_x_binning = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_x_binning", "int", 1, "Horizontal Binning.", "", &SpinnakerConfig::image_format_x_binning)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_x_binning", "int", 1, "Horizontal Binning.", "", &SpinnakerConfig::image_format_x_binning)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_format_y_binning = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_format_y_binning = 8;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_format_y_binning = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_y_binning", "int", 1, "Vertical Binning.", "", &SpinnakerConfig::image_format_y_binning)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_y_binning", "int", 1, "Vertical Binning.", "", &SpinnakerConfig::image_format_y_binning)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_format_x_decimation = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_format_x_decimation = 8;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_format_x_decimation = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_x_decimation", "int", 1, "Horizontal Decimation.", "", &SpinnakerConfig::image_format_x_decimation)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_x_decimation", "int", 1, "Horizontal Decimation.", "", &SpinnakerConfig::image_format_x_decimation)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_format_y_decimation = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_format_y_decimation = 8;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_format_y_decimation = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_y_decimation", "int", 1, "Vertical Decimation.", "", &SpinnakerConfig::image_format_y_decimation)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("image_format_y_decimation", "int", 1, "Vertical Decimation.", "", &SpinnakerConfig::image_format_y_decimation)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_format_x_reverse = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_format_x_reverse = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_format_x_reverse = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("image_format_x_reverse", "bool", 1, "Horizontal Reverse.", "", &SpinnakerConfig::image_format_x_reverse)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("image_format_x_reverse", "bool", 1, "Horizontal Reverse.", "", &SpinnakerConfig::image_format_x_reverse)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_format_y_reverse = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_format_y_reverse = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_format_y_reverse = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("image_format_y_reverse", "bool", 1, "Vertical Reverse.", "", &SpinnakerConfig::image_format_y_reverse)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("image_format_y_reverse", "bool", 1, "Vertical Reverse.", "", &SpinnakerConfig::image_format_y_reverse)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.image_format_color_coding = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.image_format_color_coding = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.image_format_color_coding = "Mono8";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("image_format_color_coding", "str", 1, "Image Color coding", "{'enum_description': 'Image Color Coding: Format of the pixel provided by the camera.', 'enum': [{'srcline': 137, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Mono8', 'ctype': 'std::string', 'type': 'str', 'name': 'Mono8'}, {'srcline': 138, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Mono16', 'ctype': 'std::string', 'type': 'str', 'name': 'Mono16'}, {'srcline': 140, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'RGB8Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'RGB8Packed'}, {'srcline': 142, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGR8', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGR8'}, {'srcline': 143, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerRG8', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerRG8'}, {'srcline': 144, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGB8', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGB8'}, {'srcline': 145, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerBG8', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerBG8'}, {'srcline': 147, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGR16', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGR16'}, {'srcline': 148, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerRG16', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerRG16'}, {'srcline': 149, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGB16', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGB16'}, {'srcline': 150, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerBG16', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerBG16'}, {'srcline': 152, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Mono12Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'Mono12Packed'}, {'srcline': 154, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGR12Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGR12Packed'}, {'srcline': 155, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerRG12Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerRG12Packed'}, {'srcline': 156, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGB12Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGB12Packed'}, {'srcline': 157, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerBG12Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerBG12Packed'}, {'srcline': 159, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'YUV411Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'YUV411Packed'}, {'srcline': 160, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'YUV422Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'YUV422Packed'}, {'srcline': 161, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'YUV444Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'YUV444Packed'}, {'srcline': 163, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Mono12p', 'ctype': 'std::string', 'type': 'str', 'name': 'Mono12p'}, {'srcline': 165, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGR12p', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGR12p'}, {'srcline': 166, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerRG12p', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerRG12p'}, {'srcline': 167, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGB12p', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGB12p'}, {'srcline': 168, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerBG12p', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerBG12p'}, {'srcline': 171, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'YCbCr8', 'ctype': 'std::string', 'type': 'str', 'name': 'YCbCr8'}, {'srcline': 172, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'YCbCr422_8', 'ctype': 'std::string', 'type': 'str', 'name': 'YCbCr422_8'}, {'srcline': 173, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'YCbCr411_8', 'ctype': 'std::string', 'type': 'str', 'name': 'YCbCr411_8'}, {'srcline': 175, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BGR8', 'ctype': 'std::string', 'type': 'str', 'name': 'BGR8'}, {'srcline': 176, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BGRa8', 'ctype': 'std::string', 'type': 'str', 'name': 'BGRa8'}]}", &SpinnakerConfig::image_format_color_coding)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("image_format_color_coding", "str", 1, "Image Color coding", "{'enum_description': 'Image Color Coding: Format of the pixel provided by the camera.', 'enum': [{'srcline': 137, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Mono8', 'ctype': 'std::string', 'type': 'str', 'name': 'Mono8'}, {'srcline': 138, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Mono16', 'ctype': 'std::string', 'type': 'str', 'name': 'Mono16'}, {'srcline': 140, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'RGB8Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'RGB8Packed'}, {'srcline': 142, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGR8', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGR8'}, {'srcline': 143, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerRG8', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerRG8'}, {'srcline': 144, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGB8', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGB8'}, {'srcline': 145, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerBG8', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerBG8'}, {'srcline': 147, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGR16', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGR16'}, {'srcline': 148, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerRG16', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerRG16'}, {'srcline': 149, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGB16', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGB16'}, {'srcline': 150, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerBG16', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerBG16'}, {'srcline': 152, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Mono12Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'Mono12Packed'}, {'srcline': 154, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGR12Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGR12Packed'}, {'srcline': 155, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerRG12Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerRG12Packed'}, {'srcline': 156, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGB12Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGB12Packed'}, {'srcline': 157, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerBG12Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerBG12Packed'}, {'srcline': 159, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'YUV411Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'YUV411Packed'}, {'srcline': 160, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'YUV422Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'YUV422Packed'}, {'srcline': 161, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'YUV444Packed', 'ctype': 'std::string', 'type': 'str', 'name': 'YUV444Packed'}, {'srcline': 163, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Mono12p', 'ctype': 'std::string', 'type': 'str', 'name': 'Mono12p'}, {'srcline': 165, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGR12p', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGR12p'}, {'srcline': 166, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerRG12p', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerRG12p'}, {'srcline': 167, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerGB12p', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerGB12p'}, {'srcline': 168, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BayerBG12p', 'ctype': 'std::string', 'type': 'str', 'name': 'BayerBG12p'}, {'srcline': 171, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'YCbCr8', 'ctype': 'std::string', 'type': 'str', 'name': 'YCbCr8'}, {'srcline': 172, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'YCbCr422_8', 'ctype': 'std::string', 'type': 'str', 'name': 'YCbCr422_8'}, {'srcline': 173, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'YCbCr411_8', 'ctype': 'std::string', 'type': 'str', 'name': 'YCbCr411_8'}, {'srcline': 175, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BGR8', 'ctype': 'std::string', 'type': 'str', 'name': 'BGR8'}, {'srcline': 176, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'BGRa8', 'ctype': 'std::string', 'type': 'str', 'name': 'BGRa8'}]}", &SpinnakerConfig::image_format_color_coding)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.isp_enable = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.isp_enable = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.isp_enable = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("isp_enable", "bool", 1, "Controls whether the image processing core is used for optional pixel format mode", "", &SpinnakerConfig::isp_enable)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<bool>("isp_enable", "bool", 1, "Controls whether the image processing core is used for optional pixel format mode", "", &SpinnakerConfig::isp_enable)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.enable_trigger = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.enable_trigger = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.enable_trigger = "Off";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("enable_trigger", "str", 0, "Enable the external triggering mode.", "", &SpinnakerConfig::enable_trigger)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("enable_trigger", "str", 0, "Enable the external triggering mode.", "", &SpinnakerConfig::enable_trigger)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trigger_selector = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trigger_selector = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trigger_selector = "FrameStart";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("trigger_selector", "str", 0, "Selects the type of trigger to configure.", "{'enum_description': 'Trigger Types', 'enum': [{'srcline': 192, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'AcquisitionStart', 'ctype': 'std::string', 'type': 'str', 'name': 'AcquisitionStart'}, {'srcline': 193, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'FrameStart', 'ctype': 'std::string', 'type': 'str', 'name': 'FrameStart'}, {'srcline': 194, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'FrameBurstStart', 'ctype': 'std::string', 'type': 'str', 'name': 'FrameBurstStart'}]}", &SpinnakerConfig::trigger_selector)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("trigger_selector", "str", 0, "Selects the type of trigger to configure.", "{'enum_description': 'Trigger Types', 'enum': [{'srcline': 192, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'AcquisitionStart', 'ctype': 'std::string', 'type': 'str', 'name': 'AcquisitionStart'}, {'srcline': 193, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'FrameStart', 'ctype': 'std::string', 'type': 'str', 'name': 'FrameStart'}, {'srcline': 194, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'FrameBurstStart', 'ctype': 'std::string', 'type': 'str', 'name': 'FrameBurstStart'}]}", &SpinnakerConfig::trigger_selector)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trigger_activation_mode = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trigger_activation_mode = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trigger_activation_mode = "FallingEdge";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("trigger_activation_mode", "str", 0, "Trigger Activiation Modes", "{'enum_description': 'Trigger Activation Modes', 'enum': [{'srcline': 201, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'LevelLow', 'ctype': 'std::string', 'type': 'str', 'name': 'LevelLow'}, {'srcline': 202, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'LevelHigh', 'ctype': 'std::string', 'type': 'str', 'name': 'LevelHigh'}, {'srcline': 203, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'FallingEdge', 'ctype': 'std::string', 'type': 'str', 'name': 'FallingEdge'}, {'srcline': 204, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'RisingEdge', 'ctype': 'std::string', 'type': 'str', 'name': 'RisingEdge'}, {'srcline': 205, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'AnyEdge', 'ctype': 'std::string', 'type': 'str', 'name': 'AnyEdge'}]}", &SpinnakerConfig::trigger_activation_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("trigger_activation_mode", "str", 0, "Trigger Activiation Modes", "{'enum_description': 'Trigger Activation Modes', 'enum': [{'srcline': 201, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'LevelLow', 'ctype': 'std::string', 'type': 'str', 'name': 'LevelLow'}, {'srcline': 202, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'LevelHigh', 'ctype': 'std::string', 'type': 'str', 'name': 'LevelHigh'}, {'srcline': 203, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'FallingEdge', 'ctype': 'std::string', 'type': 'str', 'name': 'FallingEdge'}, {'srcline': 204, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'RisingEdge', 'ctype': 'std::string', 'type': 'str', 'name': 'RisingEdge'}, {'srcline': 205, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'AnyEdge', 'ctype': 'std::string', 'type': 'str', 'name': 'AnyEdge'}]}", &SpinnakerConfig::trigger_activation_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trigger_source = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trigger_source = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trigger_source = "Line0";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("trigger_source", "str", 0, "Trigger Sources", "{'enum_description': 'Software and Hardware Trigger Sources', 'enum': [{'srcline': 210, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Software', 'ctype': 'std::string', 'type': 'str', 'name': 'Software'}, {'srcline': 211, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line0', 'ctype': 'std::string', 'type': 'str', 'name': 'Line0'}, {'srcline': 212, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line1', 'ctype': 'std::string', 'type': 'str', 'name': 'Line1'}, {'srcline': 213, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line2', 'ctype': 'std::string', 'type': 'str', 'name': 'Line2'}, {'srcline': 214, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line3', 'ctype': 'std::string', 'type': 'str', 'name': 'Line3'}, {'srcline': 216, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput0', 'ctype': 'std::string', 'type': 'str', 'name': 'UserOutput0'}, {'srcline': 217, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput1', 'ctype': 'std::string', 'type': 'str', 'name': 'UserOutput1'}, {'srcline': 218, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput2', 'ctype': 'std::string', 'type': 'str', 'name': 'UserOutput2'}, {'srcline': 219, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput3', 'ctype': 'std::string', 'type': 'str', 'name': 'UserOutput3'}, {'srcline': 221, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Counter0Start', 'ctype': 'std::string', 'type': 'str', 'name': 'Counter0Start'}, {'srcline': 222, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Counter1Start', 'ctype': 'std::string', 'type': 'str', 'name': 'Counter1Start'}, {'srcline': 223, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Counter0End', 'ctype': 'std::string', 'type': 'str', 'name': 'Counter0End'}, {'srcline': 224, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Counter1End', 'ctype': 'std::string', 'type': 'str', 'name': 'Counter1End'}, {'srcline': 226, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'LogicBlock0', 'ctype': 'std::string', 'type': 'str', 'name': 'LogicBlock0'}, {'srcline': 227, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'LogicBlock1', 'ctype': 'std::string', 'type': 'str', 'name': 'LogicBlock1'}, {'srcline': 228, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Action0', 'ctype': 'std::string', 'type': 'str', 'name': 'Action0'}]}", &SpinnakerConfig::trigger_source)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("trigger_source", "str", 0, "Trigger Sources", "{'enum_description': 'Software and Hardware Trigger Sources', 'enum': [{'srcline': 210, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Software', 'ctype': 'std::string', 'type': 'str', 'name': 'Software'}, {'srcline': 211, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line0', 'ctype': 'std::string', 'type': 'str', 'name': 'Line0'}, {'srcline': 212, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line1', 'ctype': 'std::string', 'type': 'str', 'name': 'Line1'}, {'srcline': 213, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line2', 'ctype': 'std::string', 'type': 'str', 'name': 'Line2'}, {'srcline': 214, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line3', 'ctype': 'std::string', 'type': 'str', 'name': 'Line3'}, {'srcline': 216, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput0', 'ctype': 'std::string', 'type': 'str', 'name': 'UserOutput0'}, {'srcline': 217, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput1', 'ctype': 'std::string', 'type': 'str', 'name': 'UserOutput1'}, {'srcline': 218, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput2', 'ctype': 'std::string', 'type': 'str', 'name': 'UserOutput2'}, {'srcline': 219, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput3', 'ctype': 'std::string', 'type': 'str', 'name': 'UserOutput3'}, {'srcline': 221, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Counter0Start', 'ctype': 'std::string', 'type': 'str', 'name': 'Counter0Start'}, {'srcline': 222, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Counter1Start', 'ctype': 'std::string', 'type': 'str', 'name': 'Counter1Start'}, {'srcline': 223, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Counter0End', 'ctype': 'std::string', 'type': 'str', 'name': 'Counter0End'}, {'srcline': 224, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Counter1End', 'ctype': 'std::string', 'type': 'str', 'name': 'Counter1End'}, {'srcline': 226, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'LogicBlock0', 'ctype': 'std::string', 'type': 'str', 'name': 'LogicBlock0'}, {'srcline': 227, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'LogicBlock1', 'ctype': 'std::string', 'type': 'str', 'name': 'LogicBlock1'}, {'srcline': 228, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Action0', 'ctype': 'std::string', 'type': 'str', 'name': 'Action0'}]}", &SpinnakerConfig::trigger_source)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.trigger_overlap_mode = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.trigger_overlap_mode = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.trigger_overlap_mode = "ReadOut";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("trigger_overlap_mode", "str", 0, "Trigger Overlap Modes", "{'enum_description': 'Trigger Overlap Modes', 'enum': [{'srcline': 239, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'Off'}, {'srcline': 240, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'ReadOut', 'ctype': 'std::string', 'type': 'str', 'name': 'ReadOut'}, {'srcline': 241, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'PreviousFrame', 'ctype': 'std::string', 'type': 'str', 'name': 'PreviousFrame'}]}", &SpinnakerConfig::trigger_overlap_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("trigger_overlap_mode", "str", 0, "Trigger Overlap Modes", "{'enum_description': 'Trigger Overlap Modes', 'enum': [{'srcline': 239, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'Off'}, {'srcline': 240, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'ReadOut', 'ctype': 'std::string', 'type': 'str', 'name': 'ReadOut'}, {'srcline': 241, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'PreviousFrame', 'ctype': 'std::string', 'type': 'str', 'name': 'PreviousFrame'}]}", &SpinnakerConfig::trigger_overlap_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.line_source = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.line_source = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.line_source = "Off";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("line_source", "str", 0, "Line Sources", "{'enum_description': 'Selects which internal acquisition or I/O source signal to output on the selected line. LineMode must be Output', 'enum': [{'srcline': 252, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Off'}, {'srcline': 254, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line0', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Line0'}, {'srcline': 255, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line1', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Line1'}, {'srcline': 256, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line2', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Line2'}, {'srcline': 257, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line3', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Line3'}, {'srcline': 259, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput0', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_UserOutput0'}, {'srcline': 260, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput1', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_UserOutput1'}, {'srcline': 261, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput2', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_UserOutput2'}, {'srcline': 262, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput3', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_UserOutput3'}, {'srcline': 264, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Counter0Active', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Counter0Active'}, {'srcline': 265, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Counter1Active', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Counter1Active'}, {'srcline': 266, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'LogicBlock0', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_LogicBlock0'}, {'srcline': 267, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'LogicBlock1', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_LogicBlock1'}, {'srcline': 269, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'ExposureActive', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_ExposureActive'}, {'srcline': 270, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'FrameTriggerWait', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_FrameTriggerWait'}, {'srcline': 271, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'SerialPort0', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_SerialPort0'}, {'srcline': 272, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'PPSSignal', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_PPSSignal'}, {'srcline': 273, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'AllPixel', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_AllPixel'}, {'srcline': 274, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'AnyPixel', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_AnyPixel'}]}", &SpinnakerConfig::line_source)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("line_source", "str", 0, "Line Sources", "{'enum_description': 'Selects which internal acquisition or I/O source signal to output on the selected line. LineMode must be Output', 'enum': [{'srcline': 252, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Off', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Off'}, {'srcline': 254, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line0', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Line0'}, {'srcline': 255, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line1', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Line1'}, {'srcline': 256, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line2', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Line2'}, {'srcline': 257, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line3', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Line3'}, {'srcline': 259, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput0', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_UserOutput0'}, {'srcline': 260, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput1', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_UserOutput1'}, {'srcline': 261, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput2', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_UserOutput2'}, {'srcline': 262, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'UserOutput3', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_UserOutput3'}, {'srcline': 264, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Counter0Active', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Counter0Active'}, {'srcline': 265, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Counter1Active', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_Counter1Active'}, {'srcline': 266, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'LogicBlock0', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_LogicBlock0'}, {'srcline': 267, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'LogicBlock1', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_LogicBlock1'}, {'srcline': 269, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'ExposureActive', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_ExposureActive'}, {'srcline': 270, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'FrameTriggerWait', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_FrameTriggerWait'}, {'srcline': 271, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'SerialPort0', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_SerialPort0'}, {'srcline': 272, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'PPSSignal', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_PPSSignal'}, {'srcline': 273, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'AllPixel', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_AllPixel'}, {'srcline': 274, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'AnyPixel', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSource_AnyPixel'}]}", &SpinnakerConfig::line_source)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.line_selector = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.line_selector = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.line_selector = "Line0";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("line_selector", "str", 0, "Line Selector", "{'enum_description': 'Selects the physical line (or pin) of the external device connector to configure.', 'enum': [{'srcline': 280, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line0', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSelector_Line0'}, {'srcline': 281, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line1', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSelector_Line1'}, {'srcline': 282, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line2', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSelector_Line2'}, {'srcline': 283, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line3', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSelector_Line3'}]}", &SpinnakerConfig::line_selector)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("line_selector", "str", 0, "Line Selector", "{'enum_description': 'Selects the physical line (or pin) of the external device connector to configure.', 'enum': [{'srcline': 280, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line0', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSelector_Line0'}, {'srcline': 281, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line1', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSelector_Line1'}, {'srcline': 282, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line2', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSelector_Line2'}, {'srcline': 283, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Line3', 'ctype': 'std::string', 'type': 'str', 'name': 'LineSelector_Line3'}]}", &SpinnakerConfig::line_selector)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.line_mode = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.line_mode = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.line_mode = "Input";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("line_mode", "str", 0, "Line Mode", "{'enum_description': 'Line Mode', 'enum': [{'srcline': 289, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Input', 'ctype': 'std::string', 'type': 'str', 'name': 'Input'}, {'srcline': 290, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Output', 'ctype': 'std::string', 'type': 'str', 'name': 'Output'}]}", &SpinnakerConfig::line_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("line_mode", "str", 0, "Line Mode", "{'enum_description': 'Line Mode', 'enum': [{'srcline': 289, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Input', 'ctype': 'std::string', 'type': 'str', 'name': 'Input'}, {'srcline': 290, 'description': '', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Output', 'ctype': 'std::string', 'type': 'str', 'name': 'Output'}]}", &SpinnakerConfig::line_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_exposure_roi_offset_x = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_exposure_roi_offset_x = 65535;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_exposure_roi_offset_x = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("auto_exposure_roi_offset_x", "int", 0, "Auto exposure ROI X offset.", "", &SpinnakerConfig::auto_exposure_roi_offset_x)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("auto_exposure_roi_offset_x", "int", 0, "Auto exposure ROI X offset.", "", &SpinnakerConfig::auto_exposure_roi_offset_x)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_exposure_roi_offset_y = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_exposure_roi_offset_y = 65535;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_exposure_roi_offset_y = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("auto_exposure_roi_offset_y", "int", 0, "Auto exposure ROI Y offset.", "", &SpinnakerConfig::auto_exposure_roi_offset_y)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("auto_exposure_roi_offset_y", "int", 0, "Auto exposure ROI Y offset.", "", &SpinnakerConfig::auto_exposure_roi_offset_y)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_exposure_roi_width = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_exposure_roi_width = 65535;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_exposure_roi_width = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("auto_exposure_roi_width", "int", 0, "Auto exposure ROI width.", "", &SpinnakerConfig::auto_exposure_roi_width)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("auto_exposure_roi_width", "int", 0, "Auto exposure ROI width.", "", &SpinnakerConfig::auto_exposure_roi_width)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_exposure_roi_height = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_exposure_roi_height = 65535;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_exposure_roi_height = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("auto_exposure_roi_height", "int", 0, "Auto exposure ROI height.", "", &SpinnakerConfig::auto_exposure_roi_height)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<int>("auto_exposure_roi_height", "int", 0, "Auto exposure ROI height.", "", &SpinnakerConfig::auto_exposure_roi_height)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_exposure_lighting_mode = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_exposure_lighting_mode = "";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_exposure_lighting_mode = "Normal";
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("auto_exposure_lighting_mode", "str", 0, "Auto exposure lighting mode.", "{'enum_description': 'Auto algorithms lighting modes', 'enum': [{'srcline': 303, 'description': 'Normal', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Normal', 'ctype': 'std::string', 'type': 'str', 'name': 'Normal'}, {'srcline': 304, 'description': 'Front Lighting', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Frontlight', 'ctype': 'std::string', 'type': 'str', 'name': 'Frontlight'}, {'srcline': 305, 'description': 'Back Lighting', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Backlight', 'ctype': 'std::string', 'type': 'str', 'name': 'Backlight'}]}", &SpinnakerConfig::auto_exposure_lighting_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<std::string>("auto_exposure_lighting_mode", "str", 0, "Auto exposure lighting mode.", "{'enum_description': 'Auto algorithms lighting modes', 'enum': [{'srcline': 303, 'description': 'Normal', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Normal', 'ctype': 'std::string', 'type': 'str', 'name': 'Normal'}, {'srcline': 304, 'description': 'Front Lighting', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Frontlight', 'ctype': 'std::string', 'type': 'str', 'name': 'Frontlight'}, {'srcline': 305, 'description': 'Back Lighting', 'srcfile': '/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg', 'cconsttype': 'const char * const', 'value': 'Backlight', 'ctype': 'std::string', 'type': 'str', 'name': 'Backlight'}]}", &SpinnakerConfig::auto_exposure_lighting_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.time_offset = -5.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.time_offset = 5.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.time_offset = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("time_offset", "double", 0, "Time offset to add to image time stamps.", "", &SpinnakerConfig::time_offset)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(SpinnakerConfig::AbstractParamDescriptionConstPtr(new SpinnakerConfig::ParamDescription<double>("time_offset", "double", 0, "Time offset to add to image time stamps.", "", &SpinnakerConfig::time_offset)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(SpinnakerConfig::AbstractGroupDescriptionConstPtr(new SpinnakerConfig::GroupDescription<SpinnakerConfig::DEFAULT, SpinnakerConfig>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<SpinnakerConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<SpinnakerConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<SpinnakerConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    SpinnakerConfig __max__;
    SpinnakerConfig __min__;
    SpinnakerConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const SpinnakerConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static SpinnakerConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &SpinnakerConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const SpinnakerConfig &SpinnakerConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const SpinnakerConfig &SpinnakerConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const SpinnakerConfig &SpinnakerConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<SpinnakerConfig::AbstractParamDescriptionConstPtr> &SpinnakerConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<SpinnakerConfig::AbstractGroupDescriptionConstPtr> &SpinnakerConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const SpinnakerConfigStatics *SpinnakerConfig::__get_statics__()
  {
    const static SpinnakerConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = SpinnakerConfigStatics::get_instance();

    return statics;
  }

//#line 83 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_AutoOff = "Off";
//#line 84 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_AutoOnce = "Once";
//#line 85 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_AutoContinuous = "Continuous";
//#line 137 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Mono8 = "Mono8";
//#line 138 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Mono16 = "Mono16";
//#line 140 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_RGB8Packed = "RGB8Packed";
//#line 142 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerGR8 = "BayerGR8";
//#line 143 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerRG8 = "BayerRG8";
//#line 144 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerGB8 = "BayerGB8";
//#line 145 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerBG8 = "BayerBG8";
//#line 147 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerGR16 = "BayerGR16";
//#line 148 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerRG16 = "BayerRG16";
//#line 149 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerGB16 = "BayerGB16";
//#line 150 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerBG16 = "BayerBG16";
//#line 152 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Mono12Packed = "Mono12Packed";
//#line 154 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerGR12Packed = "BayerGR12Packed";
//#line 155 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerRG12Packed = "BayerRG12Packed";
//#line 156 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerGB12Packed = "BayerGB12Packed";
//#line 157 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerBG12Packed = "BayerBG12Packed";
//#line 159 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_YUV411Packed = "YUV411Packed";
//#line 160 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_YUV422Packed = "YUV422Packed";
//#line 161 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_YUV444Packed = "YUV444Packed";
//#line 163 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Mono12p = "Mono12p";
//#line 165 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerGR12p = "BayerGR12p";
//#line 166 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerRG12p = "BayerRG12p";
//#line 167 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerGB12p = "BayerGB12p";
//#line 168 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BayerBG12p = "BayerBG12p";
//#line 171 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_YCbCr8 = "YCbCr8";
//#line 172 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_YCbCr422_8 = "YCbCr422_8";
//#line 173 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_YCbCr411_8 = "YCbCr411_8";
//#line 175 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BGR8 = "BGR8";
//#line 176 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_BGRa8 = "BGRa8";
//#line 192 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_AcquisitionStart = "AcquisitionStart";
//#line 193 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_FrameStart = "FrameStart";
//#line 194 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_FrameBurstStart = "FrameBurstStart";
//#line 201 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LevelLow = "LevelLow";
//#line 202 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LevelHigh = "LevelHigh";
//#line 203 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_FallingEdge = "FallingEdge";
//#line 204 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_RisingEdge = "RisingEdge";
//#line 205 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_AnyEdge = "AnyEdge";
//#line 210 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Software = "Software";
//#line 211 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Line0 = "Line0";
//#line 212 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Line1 = "Line1";
//#line 213 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Line2 = "Line2";
//#line 214 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Line3 = "Line3";
//#line 216 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_UserOutput0 = "UserOutput0";
//#line 217 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_UserOutput1 = "UserOutput1";
//#line 218 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_UserOutput2 = "UserOutput2";
//#line 219 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_UserOutput3 = "UserOutput3";
//#line 221 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Counter0Start = "Counter0Start";
//#line 222 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Counter1Start = "Counter1Start";
//#line 223 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Counter0End = "Counter0End";
//#line 224 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Counter1End = "Counter1End";
//#line 226 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LogicBlock0 = "LogicBlock0";
//#line 227 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LogicBlock1 = "LogicBlock1";
//#line 228 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Action0 = "Action0";
//#line 239 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Off = "Off";
//#line 240 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_ReadOut = "ReadOut";
//#line 241 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_PreviousFrame = "PreviousFrame";
//#line 252 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_Off = "Off";
//#line 254 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_Line0 = "Line0";
//#line 255 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_Line1 = "Line1";
//#line 256 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_Line2 = "Line2";
//#line 257 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_Line3 = "Line3";
//#line 259 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_UserOutput0 = "UserOutput0";
//#line 260 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_UserOutput1 = "UserOutput1";
//#line 261 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_UserOutput2 = "UserOutput2";
//#line 262 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_UserOutput3 = "UserOutput3";
//#line 264 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_Counter0Active = "Counter0Active";
//#line 265 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_Counter1Active = "Counter1Active";
//#line 266 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_LogicBlock0 = "LogicBlock0";
//#line 267 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_LogicBlock1 = "LogicBlock1";
//#line 269 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_ExposureActive = "ExposureActive";
//#line 270 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_FrameTriggerWait = "FrameTriggerWait";
//#line 271 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_SerialPort0 = "SerialPort0";
//#line 272 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_PPSSignal = "PPSSignal";
//#line 273 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_AllPixel = "AllPixel";
//#line 274 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSource_AnyPixel = "AnyPixel";
//#line 280 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSelector_Line0 = "Line0";
//#line 281 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSelector_Line1 = "Line1";
//#line 282 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSelector_Line2 = "Line2";
//#line 283 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_LineSelector_Line3 = "Line3";
//#line 289 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Input = "Input";
//#line 290 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Output = "Output";
//#line 303 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Normal = "Normal";
//#line 304 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Frontlight = "Frontlight";
//#line 305 "/media/ikun/T7/task3/ME5413_Planning_Project-main/src/flir_camera_driver-kinetic-devel/spinnaker_camera_driver/cfg/Spinnaker.cfg"
      const char * const Spinnaker_Backlight = "Backlight";
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __SPINNAKERRECONFIGURATOR_H__
